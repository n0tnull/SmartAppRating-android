// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext.kotlin_version = '1.3.50'

  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.1'
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.google.gms:google-services:4.3.2'
  }

}

allprojects {
  repositories {
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
    if (findProperty("nexusRepositoryUrl") != null)
    {
      maven
      {
        credentials
        {
          username nexusUsername
          password nexusPassword
        }
        url nexusRepositoryUrl
      }
    }
  }
  ext
  {
    compileSdkVersion = 28
    minSdkVersion = 16

    logger_version = "1.0.0"

    // JSON
    retrofit_library_version = '2.6.2'
    moshi_version = "1.8.0"

    // Remote Config
    coroutines_version = "1.1.1"
    firebase_config_version = '19.0.2'

    groupId = 'com.smartnsoft'
    artifactId = 'smartapprating'
    libraryName = "SmartAppRating"
    repositoryName = "SmartAppRating-android"

    coreArtifactDescription = "SmartAppRating is a simple library to ask user to rate your app if some condition are met"
    jsonArtifactDescription = "SmartAppRating-json is a module of SmartAppRating which adds configuration via a remote json"
    remoteConfigArtifactDescription = "SmartAppRating-remoteconfig is a module of SmartAppRating which adds configuration via Firebase RemoteConfig"

    documentationReference = [
    "http://docs.oracle.com/javase/7/docs/api/",
    "http://d.android.com/reference/"
    ]
    coreVersionName = "2.0.0"
    jsonVersionName = "2.0.0"
    remoteConfigVersionName = "2.0.0"
    versionCode = 6
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

task releaseCore(dependsOn: [':core:uploadArchives']) {
}

task releaseRemoteConfig(dependsOn: [':remoteconfig:uploadArchives']) {
}

task releaseJson(dependsOn: [':remotejson:uploadArchives']) {
}

task releaseAll(dependsOn:
['releaseCore',
 'releaseRemoteConfig',
 'releaseJson',
]) {
}
